"use strict";

/*
 * Copyright (C) 2017, hapjs.org. All rights reserved.
 */
var fs = require('fs');

var path = require('path');

var info = require('./common/info');

var _require = require('./common/config'),
    initOptions = _require.initOptions;

var HandlerPlugin = require('./webpack/plugin/handler-plugin');

var ResourcePlugin = require('./webpack/plugin/resource-plugin');

var ZipPlugin = require('./webpack/plugin/zip-plugin');

var NotifyPlugin = require('./webpack/plugin/notify-plugin');

var _require2 = require('./common/utils'),
    colorconsole = _require2.colorconsole;

var FILE_EXT_LIST = info.name.extList;
/**
 * 根据 manifest 中的路由配置生成文件优先级
 *
 * @param {string} manifestPath - manifest.json 文件路径
 * @returns {Array<String|RegExp>} - 优先级列表
 */

function genPriorities(manifestPath) {
  // 文件的优先级
  var priorities = ['manifest.json', 'app.js', // <--- 入口页面将会在这
  /^common\//i // 静态资源
  ];
  var manifest;

  try {
    var content = fs.readFileSync(manifestPath).toString();
    manifest = JSON.parse(content);
  } catch (err) {
    colorconsole.error("\u8BFB\u53D6 manifest.json \u5931\u8D25\uFF1A ".concat(err.message));
  }

  if (manifest && manifest.router && manifest.router.entry) {
    var entry = manifest.router.entry;
    priorities.splice(2, 0, new RegExp("^".concat(entry, "/")));
  } else {
    colorconsole.error("manifest.json \u4E2D\u672A\u914D\u7F6E\u5165\u53E3\u9875\u9762 router.entry");
  }

  return priorities;
}
/**
 * 配置关联
 * @param webpackConf
 * @param defaults
 * @param options - 命令行参数
 */


function postHook(webpackConf, defaults, options) {
  // 环境信息
  var appPackageName = defaults.appPackageName,
      versionCode = defaults.versionCode,
      pathDist = defaults.pathDist,
      pathBuild = defaults.pathBuild,
      pathSrc = defaults.pathSrc;
  initOptions(options);
  var priorities = genPriorities(path.join(pathSrc, 'manifest.json'));
  webpackConf.module.rules.push({
    test: new RegExp("(".concat(FILE_EXT_LIST.map(function (k) {
      return '\\' + k;
    }).join('|'), ")(\\?[^?]+)?$")),
    use: [path.resolve(__dirname, 'webpack/loader', 'ux-loader.js')]
  }, {
    test: /\.js$/,
    use: [path.resolve(__dirname, 'webpack/loader', 'module-loader.js'), 'babel-loader']
  }); // 是否使用release签名

  var dvWithSign = process.env.NODE_PHASE === 'dev' && options.sign;
  var olWithoutDebug = process.env.NODE_PHASE !== 'dev' && !options.debug;
  var useReleaseSign = dvWithSign || olWithoutDebug;
  var useSignName = !useReleaseSign ? 'debug' : 'release';
  webpackConf.plugins.push( // 框架Handler包装
  new HandlerPlugin(), new ResourcePlugin({
    pathSrc: pathSrc,
    pathBuild: pathBuild,
    sign: useReleaseSign
  }), // 打包
  new ZipPlugin({
    name: appPackageName,
    versionCode: versionCode,
    output: pathDist,
    pathBuild: pathBuild,
    sign: useSignName,
    priorities: priorities
  }), new NotifyPlugin());
}

module.exports = {
  postHook: postHook
};