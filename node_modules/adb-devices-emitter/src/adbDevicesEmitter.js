/**
 * Copyright (C) 2017, hapjs.org. All rights reserved.
 */

const EventEmitter = require('events')
let { debuglog } = require('util')

const adbCommander = require('adb-commander')

debuglog = debuglog('adb')

class ADBDevicesEmitter extends EventEmitter {
  constructor () {
    super()

    this._builtinEvents = [
      'deviceAdded',
      'deviceRemoved'
    ]
    this._snList = []
    this._stopFlag = false
  }

  addEventListener (eventType, listener) {
    debuglog(`addEventListener(): start for ${eventType}`)
    const idx = this._builtinEvents.indexOf(eventType)
    if (idx >= 0) {
      this.on(eventType, listener)
    }
  }

  /**
   * 启动轮询设备
   */
  start () {
    debuglog(`start(): start`)
    this._stopFlag = false
    this._execPolling(async (resolve, reject) => {
      debuglog(`execPolling(): callback start`)
      const { deviceList, err } = await adbCommander.deviceList()

      debuglog(`execPolling():\nfound deviceList: ${JSON.stringify(deviceList)},\n_snList: ${JSON.stringify(this._snList)}`)

      if (err) {
        console.error(`adb-commander: adb获取手机设备失败`, JSON.stringify(err))
        return resolve(true)
      }

      // 检测设备是否发生变化
      const deviceListState = this._detectDeviceListChange(deviceList)

      debuglog(`execPolling():\nnewlyAdded devices: ${JSON.stringify(deviceListState.newlyAdded)}\nremoved devices: ${JSON.stringify(deviceListState.removed)}`)

      deviceListState.newlyAdded.forEach((sn) => {
        this.emit('deviceAdded', { sn })
      })
      deviceListState.removed.forEach((sn) => {
        this.emit('deviceRemoved', { sn })
      })

      debuglog(`execPolling(): go to next polling`)
      return resolve(true)
    })
  }

  /**
   *
   *
   */
  stop () {
    this._stopFlag = true
  }

  /**
   * 检测设备列表的变化，返回新增和删除的集合
   * @param currentList
   */
  _detectDeviceListChange (currentList) {
    const result = {}
    result.newlyAdded = currentList.filter((item) => {
      return this._snList.indexOf(item) < 0
    })
    result.removed = this._snList.filter((item) => {
      return currentList.indexOf(item) < 0
    })
    this._snList = currentList
    return result
  }

  /**
   * 轮询方法
   * @param callback
   */
  _execPolling (callback) {
    // 轮询间隔时间 5s
    const delay = 5e3

    const polling = () => {
      new Promise((res, rej) => {
        debuglog(`execPolling(): promise def start`)
        callback.apply(this, [res, rej])
      }).then((next) => {
        next && !this._stopFlag && setTimeout(() => {
          debuglog(`execPolling(): start polling again`)
          polling()
        }, delay)
      }).catch((err) => {
        console.error(`adb-commander: 退出轮询: ${err.message}`)
      })
    }

    polling()
  }
}

module.exports = ADBDevicesEmitter
