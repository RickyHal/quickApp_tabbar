const adbDriver = require('adb-driver')

class ADBCommander {
  constructor () {
    this.exec = adbDriver.exec
  }

  /**
   * 构造调用adb命令的工具函数
   * @private
   * @returns {Promise.<{result: *, err: *}>}
   */
  async _commandFactory (command) {
    const cmdResult = await this.exec(command)
    if (cmdResult instanceof Error) {
      return { err: cmdResult }
    }
    else {
      return { result: cmdResult }
    }
  }

  /**
   * 获取设备列表
   * @returns {Promise.<{deviceList: *, err: *}>}
   */
  async deviceList () {
    const { result, err } = await this._commandFactory(`adb devices`)
    return {
      deviceList: _parseDeviceInfo(result),
      err
    }

    /**
     * 解析设备原始信息为数组信息;
     * @private
     */
    function _parseDeviceInfo (stdout) {
      if (!stdout) {
        return []
      }
      const lines = stdout.replace(/(\n|\r\n){1,}/g, '\n').split('\n')
      const result = lines.filter((item, idx) => {
        const oneDevice = item.split('\t')
        return idx !== 0 && oneDevice[1] === 'device'
      }).map((item) => {
        return item.split('\t')[0]
      })
      return result
    }
  }

  /**
   * 建立adb reverse设定
   * @param deviceSN 设备sn号
   * @param localPort 本地端口
   * @param remotePort 远程端口
   * @returns {Promise.<{result: *, err: *}>}
   */
  async reverse (deviceSN, localPort, remotePort) {
    const cmd = `adb -s ${deviceSN} reverse tcp:${remotePort} tcp:${localPort}`
    return await this._commandFactory(cmd)
  }

  /**
   * 建立adb reverse设定
   * @param deviceSN 设备sn号
   * @param localPort 本地端口
   * @param remotePort 远程端口
   * @returns {Promise.<{result: *, err: *}>}
   */
  async forward (deviceSN, localPort, remotePort) {
    const cmd = `adb -s ${deviceSN} forward tcp:${localPort} tcp:${remotePort}`
    return await this._commandFactory(cmd)
  }

  /**
   * 返回adb version信息
   * @returns {Promise.<{version: *, err: *}>}
   */
  async version () {
    const { result, err } = await this._commandFactory(`adb version`)
    return { version: result, err }
  }

  /**
   * 输出adb命令的执行结果
   * @param cmd
   * @returns {Promise.<void>}
   */
  async print (cmd) {
    const { result, err } = await this._commandFactory(cmd)
    if (err) {
      console.error(`### App Server ### print(): adb error: ${err.message}`)
    }
  }

  /**
   * 卸载
   * @param deviceSN 设备sn号
   * @param pkg apk 包名
   * @returns {Promise.<{result: *, err: *}>}
   */
  async uninstall (deviceSN, pkg) {
    const { result, err } = await this._commandFactory(`adb -s ${deviceSN} uninstall ${pkg}`)
    return { result, err }
  }

  /**
   * 安装apk
   * @param deviceSN 设备sn号
   * @param apkPath apk文件路径
   * @returns {Promise.<{result: *, err: *}>}
   */
  async install (deviceSN, apkPath) {
    const { result, err } = await this._commandFactory(`adb -s ${deviceSN} install ${apkPath}`)
    return { result, err }
  }

  /**
   * 判断设备是否安装
   * @param deviceSN 设备sn号
   * @param pkg 包名
   * @returns {Promise.<{isInstalled: *, err: *}>}
   */
  async isInstalled (deviceSN, pkg) {
    const { result, err } = await this._commandFactory(`adb -s ${deviceSN} shell pm path ${pkg}`)
    let isInstalled = false
    if (result && result.indexOf('package:') > -1) {
      isInstalled = true
    }
    return { isInstalled, err }
  }

  /**
   * 启动Activity
   *
   * @param deviceSN 设备sn号
   * @param action(可选) 指定Intent action
   * @param component(可选) 指定组件名
   * @param extra(可选) [{key, type, value}...] Extra参数
   * @returns {Promise.<void>}
   */
  async startActivity(deviceSN, action, component, extra) {
    let commandArray = []
    commandArray.push('adb', '-s', deviceSN, 'shell', 'am', 'start')
    if (action !== undefined) {
      commandArray.push('-a', action)
    }
    if (component !== undefined) {
      commandArray.push('-n', component)
    }
    function parseExtra (extra) {
      const typeMap = {
        'sting': '--es',
        'null': '--esn',
        'boolean': '--ez',
        'int': '--ei',
        'float': '--ef',
        'uri': '--eu',
        'component': '--ecn',
        'String[]': '--esa',
        'int[]': '--eia',
        'long[]': '--ela',
        'float[]': '--efa'
      }
      let extraCommands = []
      extra.forEach((item) => {
        if (item.type in typeMap) {
          extraCommands.push(typeMap[item.type])
          extraCommands.push(item.key)
          if (item.type.endsWith('[]')){
            extraCommands.push(item.value.join(','))
          } else {
            extraCommands.push(item.value)
          }
        }
      })
      return extraCommands
    }
    if (extra) {
      commandArray.push(parseExtra(extra).join(' '))
    }

    console.log('command: ', commandArray.join(' '))

    const { result, err } = await this._commandFactory(commandArray.join(' '))
    return { result, err }
  }

  /**
   * 执行adb命令
   *
   * @param command adb command
   * @returns {Promise.<{result: *, err: *}>}
   */
  async exeCommand(command) {
    return await this._commandFactory(command)
  }
}

module.exports = ADBCommander
